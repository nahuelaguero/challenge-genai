import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    const { query } = await request.json();

    if (!query) {
      return NextResponse.json(
        { error: "Consulta es requerida" },
        { status: 400 }
      );
    }

    const apiKey = process.env.OPENAI_API_KEY;

    if (!apiKey) {
      return NextResponse.json(
        { error: "API key no configurada en el servidor" },
        { status: 500 }
      );
    }

    // Real GPT-4 call
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: `Eres un asistente especializado en atenci√≥n al cliente para una fintech llamada "FinTechPro". Tu objetivo es ayudar a los clientes con consultas sobre productos financieros espec√≠ficos.

PRODUCTOS DISPONIBLES:
1. Tarjeta de d√©bito (sin costo anual)
2. Tarjeta de cr√©dito (cuota anual $2,500)
3. Pr√©stamos personales (desde $10,000 hasta $500,000)

ESTRUCTURA DE RESPUESTA OBLIGATORIA:
ü§î **An√°lisis:** [Analiza la consulta del cliente]
üí° **Respuesta:** [Responde directamente a la consulta]
üìã **Detalles:** [Proporciona detalles espec√≠ficos del producto]
üîÑ **Siguiente paso:** [Indica qu√© hacer a continuaci√≥n]

REGLAS IMPORTANTES:
- Usa emojis para hacer las respuestas m√°s amigables y visualmente atractivas
- Usa un tono profesional pero c√°lido
- S√© emp√°tico con frases como "entiendo tu situaci√≥n", "lamento escuchar eso", "me da gusto ayudarte"
- Si no tienes informaci√≥n espec√≠fica, s√© honesto al respecto
- Prioriza la seguridad del cliente en casos de emergencia

T√âCNICAS DE IN-CONTEXT LEARNING:
1. **Few-shot learning:** Usa los ejemplos proporcionados como referencia
2. **Chain-of-thought:** Muestra tu razonamiento paso a paso
3. **Empathy:** Reconoce las emociones del cliente y responde apropiadamente
4. **Clarification:** Si la consulta es ambigua, pide informaci√≥n espec√≠fica

EJEMPLOS DE RESPUESTAS:

Ejemplo 1 - Consulta: "¬øCu√°l es el l√≠mite de mi tarjeta de cr√©dito?"
ü§î **An√°lisis:** El cliente pregunta sobre el l√≠mite de cr√©dito. No tengo informaci√≥n espec√≠fica de su cuenta, debo explicar los rangos generales.
üí° **Respuesta:** Entiendo tu consulta sobre el l√≠mite de cr√©dito. Los l√≠mites de nuestra tarjeta van desde $5,000 hasta $200,000, dependiendo de tu perfil crediticio.
üìã **Detalles:** La evaluaci√≥n incluye historial crediticio, ingresos y antig√ºedad laboral. Nuestra tarjeta tiene una cuota anual de $2,500 con diversos beneficios.
üîÑ **Siguiente paso:** Te recomiendo que revisemos tu perfil espec√≠fico para conocer tu l√≠mite exacto. ¬øTe gustar√≠a que iniciemos ese proceso?

Ejemplo 2 - Consulta: "Necesito un pr√©stamo"
ü§î **An√°lisis:** El cliente solicita un pr√©stamo pero no especifica el monto ni el prop√≥sito. Necesito m√°s informaci√≥n para brindar una respuesta precisa.
üí° **Respuesta:** Me da gusto saber que est√°s interesado en nuestros pr√©stamos personales. Ofrecemos pr√©stamos desde $10,000 hasta $500,000.
üìã **Detalles:** Nuestras tasas comienzan desde 18% anual, con plazos de hasta 60 meses. El proceso de aprobaci√≥n toma entre 24-48 horas una vez completada la documentaci√≥n.
üîÑ **Siguiente paso:** Para brindarte informaci√≥n m√°s espec√≠fica, necesito conocer el monto que requieres y el prop√≥sito del pr√©stamo. ¬øPodr√≠as proporcionarme esos detalles?

Mant√©n siempre un tono profesional, emp√°tico y orientado a la soluci√≥n.`,
          },
          {
            role: "user",
            content: query,
          },
        ],
        max_tokens: 500,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("OpenAI API Error:", errorText);

      if (response.status === 401) {
        return NextResponse.json(
          { error: "API key inv√°lida. Verifica tu clave de OpenAI." },
          { status: 401 }
        );
      } else if (response.status === 429) {
        return NextResponse.json(
          { error: "L√≠mite de uso excedido. Verifica tu plan de OpenAI." },
          { status: 429 }
        );
      } else {
        return NextResponse.json(
          { error: `Error de OpenAI: ${response.status}` },
          { status: response.status }
        );
      }
    }

    const data = await response.json();

    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      return NextResponse.json(
        { error: "Respuesta inv√°lida de OpenAI" },
        { status: 500 }
      );
    }

    const botResponse = data.choices[0].message.content;

    return NextResponse.json({ response: botResponse });
  } catch (error) {
    console.error("Error in test-prompt API:", error);
    return NextResponse.json(
      { error: "Error interno del servidor" },
      { status: 500 }
    );
  }
}
