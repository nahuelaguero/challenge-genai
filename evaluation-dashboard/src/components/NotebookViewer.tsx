"use client";

import React, { useState } from "react";
import ArchitectureDiagram from "./ArchitectureDiagram";

interface Metrics {
  structure_score: number;
  keyword_score: number;
  clarification_score: number;
  length_score: number;
  empathy_score: number;
  overall_score: number;
}

interface EvaluationCase {
  query: string;
  response: string;
  liveResponse?: string;
  simulatedMetrics?: Metrics;
  liveMetrics?: Metrics;
}

interface ExpectedData {
  expectedComponents: string[];
  expectedKeywords: string[];
  requiresClarification: boolean;
}

// Dataset con respuestas simuladas para cada caso
const evaluationDataset = [
  {
    id: 1,
    query:
      "Mi tarjeta de dÃ©bito fue rechazada y tengo dinero en la cuenta, quÃ© puede estar pasando?",
    expectedIntent: "problema_tarjeta",
    expectedComponents: ["analysis", "response", "details", "next_step"],
    expectedKeywords: [
      "tarjeta",
      "bloqueada",
      "lÃ­mite",
      "seguridad",
      "verificar",
    ],
    requiresClarification: false,
    response: `Lamento mucho que hayas tenido este inconveniente con tu tarjeta. Entiendo lo frustrante que puede ser.

**Mi proceso de anÃ¡lisis:**
1. VerificarÃ© posibles causas del rechazo
2. RevisarÃ© el estado de tu tarjeta
3. Te ofrecerÃ© soluciones inmediatas

**Posibles causas:**
- La tarjeta podrÃ­a estar bloqueada por seguridad
- LÃ­mite diario de transacciones alcanzado
- Problema temporal con el comercio o terminal
- Tarjeta daÃ±ada fÃ­sicamente

**Â¿Puedes confirmarme:**
- Â¿Es la primera vez que te pasa hoy?
- Â¿Has realizado otras compras exitosas recientemente?
- Â¿Recibiste alguna notificaciÃ³n en tu app?

Mientras tanto, puedes intentar pagar con nuestra app mÃ³vil usando QR.`,
    metrics: {
      clarity: 0.78,
      empathy: 0.85,
      completeness: 0.72,
      accuracy: 0.75,
    },
  },
  {
    id: 2,
    query: "CÃ³mo solicito una tarjeta de crÃ©dito?",
    expectedIntent: "solicitud_producto",
    expectedComponents: ["analysis", "response", "details", "next_step"],
    expectedKeywords: [
      "requisitos",
      "documentos",
      "ingresos",
      "proceso",
      "app",
    ],
    requiresClarification: false,
    response: `ğŸ¤” **AnÃ¡lisis:** DetectÃ© que deseas solicitar una tarjeta de crÃ©dito.

ğŸ’¡ **Respuesta:** Â¡Excelente decisiÃ³n! Solicitar tu tarjeta de crÃ©dito es muy sencillo a travÃ©s de nuestra app o web.

ğŸ“‹ **Detalles:**
â€¢ Requisitos bÃ¡sicos:
  - Ser mayor de 18 aÃ±os
  - Ingresos mÃ­nimos de $800.000
  - Documento de identidad vigente
  - Historial crediticio (no indispensable)

â€¢ Documentos necesarios:
  - CÃ©dula de ciudadanÃ­a
  - Certificado laboral o de ingresos
  - Extractos bancarios Ãºltimos 3 meses

â€¢ Proceso de solicitud:
  1. Ingresa a la app/web
  2. Selecciona "Solicitar tarjeta de crÃ©dito"
  3. Completa el formulario
  4. Adjunta documentos
  5. Espera aprobaciÃ³n (24-48 horas)

ğŸ”„ **Siguiente paso:** Â¿Te gustarÃ­a que te envÃ­e el link directo para iniciar tu solicitud? TambiÃ©n puedo explicarte los beneficios de nuestras tarjetas.`,
    metrics: {
      clarity: 0.82,
      empathy: 0.75,
      completeness: 0.85,
      accuracy: 0.8,
    },
  },
  {
    id: 3,
    query: "Necesito un prÃ©stamo",
    expectedIntent: "solicitud_prestamo",
    expectedComponents: ["analysis", "response", "details", "next_step"],
    expectedKeywords: ["monto", "plazo", "tasa", "requisitos", "simulador"],
    requiresClarification: true,
    response: `ğŸ¤” **AnÃ¡lisis:** Entiendo que necesitas un prÃ©stamo. Para ofrecerte la mejor opciÃ³n, necesito conocer algunos detalles.

ğŸ’¡ **Respuesta:** Perfecto, puedo ayudarte con informaciÃ³n sobre nuestros prÃ©stamos personales. Tenemos varias opciones segÃºn tus necesidades.

ğŸ“‹ **Detalles:** 
â€¢ Tipos de prÃ©stamos disponibles:
  - Libre inversiÃ³n: desde $1M hasta $50M
  - Educativo: condiciones especiales
  - Vivienda: hasta 70% del valor
  
â€¢ Plazos: desde 6 hasta 60 meses
â€¢ Tasas: desde 1.2% mensual
â€¢ AprobaciÃ³n: 24 horas

Para darte informaciÃ³n mÃ¡s especÃ­fica, necesito saber:
- Â¿QuÃ© monto aproximado necesitas?
- Â¿Para quÃ© lo necesitas?
- Â¿En cuÃ¡nto tiempo podrÃ­as pagarlo?

ğŸ”„ **Siguiente paso:** Puedo realizar una simulaciÃ³n personalizada con estos datos o explicarte el proceso de solicitud.`,
    metrics: {
      clarity: 0.8,
      empathy: 0.7,
      completeness: 0.78,
      accuracy: 0.82,
    },
  },
  {
    id: 4,
    query: "cuales son las comisiones de la tarjeta",
    expectedIntent: "consulta_comisiones",
    expectedComponents: ["analysis", "response", "details", "next_step"],
    expectedKeywords: ["cuota", "manejo", "retiro", "transferencia", "gratis"],
    requiresClarification: true,
    response: `ğŸ¤” **AnÃ¡lisis:** Veo que necesitas informaciÃ³n sobre comisiones. Como manejamos diferentes tarjetas, te darÃ© un resumen general.

ğŸ’¡ **Respuesta:** Las comisiones varÃ­an segÃºn el tipo de tarjeta (dÃ©bito o crÃ©dito). Te muestro el detalle:

ğŸ“‹ **Detalles:**
**Tarjeta de DÃ©bito:**
â€¢ Cuota de manejo: $0 (Â¡Gratis!)
â€¢ Retiros en cajeros propios: $0
â€¢ Retiros en otros cajeros: $4,500
â€¢ Transferencias: $0
â€¢ Compras: $0

**Tarjeta de CrÃ©dito:**
â€¢ Cuota de manejo: $15,000/mes (primer aÃ±o gratis)
â€¢ Avances: 3% del monto
â€¢ Compras: $0
â€¢ Pagos diferidos: segÃºn el plazo

Â¿De cuÃ¡l tarjeta especÃ­ficamente necesitas informaciÃ³n?

ğŸ”„ **Siguiente paso:** Puedo explicarte cÃ³mo evitar algunas comisiones o los beneficios adicionales de cada tarjeta.`,
    metrics: {
      clarity: 0.79,
      empathy: 0.65,
      completeness: 0.75,
      accuracy: 0.77,
    },
  },
  {
    id: 5,
    query: "Como bajo mi app?",
    expectedIntent: "descarga_app",
    expectedComponents: ["analysis", "response", "details", "next_step"],
    expectedKeywords: ["descargar", "Play Store", "App Store", "link", "QR"],
    requiresClarification: false,
    response: `ğŸ¤” **AnÃ¡lisis:** Necesitas descargar nuestra aplicaciÃ³n mÃ³vil.

ğŸ’¡ **Respuesta:** Â¡Perfecto! Descargar nuestra app es muy fÃ¡cil y rÃ¡pido. Te explico cÃ³mo hacerlo segÃºn tu dispositivo.

ğŸ“‹ **Detalles:**
**Para Android:**
1. Abre Google Play Store
2. Busca "[Nombre Fintech]"
3. Toca "Instalar"
4. Espera la descarga

**Para iPhone:**
1. Abre App Store
2. Busca "[Nombre Fintech]"
3. Toca "Obtener"
4. Confirma con Face ID/Touch ID

**Alternativa rÃ¡pida:**
â€¢ EnvÃ­a "APP" al WhatsApp +57 300 XXX XXXX
â€¢ Te llegarÃ¡ el link directo

La app pesa aproximadamente 45MB y es compatible con Android 5.0+ y iOS 12+.

ğŸ”„ **Siguiente paso:** Una vez descargada, puedo guiarte en el proceso de registro si lo necesitas.`,
    metrics: {
      clarity: 0.85,
      empathy: 0.72,
      completeness: 0.83,
      accuracy: 0.81,
    },
  },
  {
    id: 6,
    query: "Olvide mi clave que hago",
    expectedIntent: "recuperar_clave",
    expectedComponents: ["analysis", "response", "details", "next_step"],
    expectedKeywords: [
      "recuperar",
      "restablecer",
      "SMS",
      "correo",
      "seguridad",
    ],
    requiresClarification: false,
    response: `ğŸ¤” **AnÃ¡lisis:** Veo que olvidaste tu clave de acceso. No te preocupes, es algo comÃºn.

ğŸ’¡ **Respuesta:** Entiendo tu situaciÃ³n. Recuperar tu clave es un proceso sencillo y seguro que puedes hacer en minutos.

ğŸ“‹ **Detalles:** 
**OpciÃ³n 1 - Desde la app:**
1. En la pantalla de login, toca "Â¿Olvidaste tu clave?"
2. Ingresa tu nÃºmero de documento
3. RecibirÃ¡s un cÃ³digo por SMS
4. Ingresa el cÃ³digo y crea tu nueva clave

**OpciÃ³n 2 - Por seguridad adicional:**
â€¢ Llama al 01 8000 XXX XXX
â€¢ Ten a mano tu documento y tarjeta
â€¢ Responde las preguntas de seguridad
â€¢ El asesor te ayudarÃ¡ inmediatamente

**Recomendaciones para tu nueva clave:**
â€¢ MÃ­nimo 8 caracteres
â€¢ Combina nÃºmeros y letras
â€¢ Evita fechas de nacimiento

ğŸ”„ **Siguiente paso:** Â¿Prefieres que te envÃ­e el link directo para recuperar tu clave o necesitas ayuda adicional?`,
    metrics: {
      clarity: 0.83,
      empathy: 0.88,
      completeness: 0.82,
      accuracy: 0.84,
    },
  },
  {
    id: 7,
    query: "puedo pagar netflix con la tarjeta?",
    expectedIntent: "uso_tarjeta",
    expectedComponents: ["analysis", "response", "details", "next_step"],
    expectedKeywords: [
      "internacional",
      "suscripciones",
      "dÃ©bito",
      "crÃ©dito",
      "activar",
    ],
    requiresClarification: false,
    response: `ğŸ¤” **AnÃ¡lisis:** Quieres saber si puedes usar tu tarjeta para pagar Netflix.

ğŸ’¡ **Respuesta:** Â¡SÃ­, absolutamente! Puedes usar tanto tu tarjeta de dÃ©bito como de crÃ©dito para pagar Netflix y otras suscripciones.

ğŸ“‹ **Detalles:**
**Con Tarjeta de CrÃ©dito:**
âœ“ Funciona de inmediato
âœ“ Acumulas puntos por cada pago
âœ“ Puedes diferir a 1 cuota sin interÃ©s

**Con Tarjeta de DÃ©bito:**
âœ“ Debes activar compras internacionales
âœ“ Se debita directo de tu cuenta
âœ“ Sin costos adicionales

**Para activar compras internacionales:**
1. Ingresa a la app
2. Ve a "Mis tarjetas"
3. Activa "Compras por internet"
4. Â¡Listo! Ya puedes usarla

**Tip:** TambiÃ©n sirve para Spotify, Disney+, Amazon Prime y mÃ¡s.

ğŸ”„ **Siguiente paso:** Â¿Necesitas ayuda para activar las compras internacionales en tu tarjeta?`,
    metrics: {
      clarity: 0.87,
      empathy: 0.78,
      completeness: 0.86,
      accuracy: 0.85,
    },
  },
  {
    id: 8,
    query: "Hasta que hora atienden",
    expectedIntent: "horarios_atencion",
    expectedComponents: ["analysis", "response", "details", "next_step"],
    expectedKeywords: ["horario", "24/7", "chat", "telÃ©fono", "oficina"],
    requiresClarification: false,
    response: `ğŸ¤” **AnÃ¡lisis:** Necesitas conocer nuestros horarios de atenciÃ³n.

ğŸ’¡ **Respuesta:** Te comparto todos nuestros canales y horarios de atenciÃ³n para que elijas el mÃ¡s conveniente.

ğŸ“‹ **Detalles:**
**Chat en app y web:** 
â€¢ 24/7 todos los dÃ­as
â€¢ Respuesta inmediata con IA
â€¢ Agente humano: 6 AM - 10 PM

**LÃ­nea telefÃ³nica:**
â€¢ Lunes a viernes: 7 AM - 8 PM
â€¢ SÃ¡bados: 8 AM - 5 PM
â€¢ Domingos y festivos: 9 AM - 3 PM

**Oficinas fÃ­sicas:**
â€¢ Lunes a viernes: 8 AM - 5 PM
â€¢ SÃ¡bados: 9 AM - 1 PM
â€¢ Domingos: Cerrado

**WhatsApp Business:**
â€¢ 24/7 para consultas
â€¢ Agente: 8 AM - 6 PM

ğŸ”„ **Siguiente paso:** Â¿Hay algo especÃ­fico en lo que necesites ayuda ahora mismo?`,
    metrics: {
      clarity: 0.84,
      empathy: 0.73,
      completeness: 0.88,
      accuracy: 0.82,
    },
  },
  {
    id: 9,
    query: "tengo un cobro que no reconozco",
    expectedIntent: "reclamo_transaccion",
    expectedComponents: ["analysis", "response", "details", "next_step"],
    expectedKeywords: [
      "bloquear",
      "disputa",
      "fraude",
      "seguridad",
      "reembolso",
    ],
    requiresClarification: true,
    response: `ğŸ¤” **AnÃ¡lisis:** DetectÃ© un posible cargo no reconocido en tu cuenta. Esto requiere atenciÃ³n inmediata.

ğŸ’¡ **Respuesta:** Lamento esta situaciÃ³n. Vamos a resolverlo rÃ¡pidamente. Tu seguridad es nuestra prioridad.

ğŸ“‹ **Detalles:**
**Acciones inmediatas:**
1. Â¿Ya bloqueaste tu tarjeta? 
   - Si no: Ve a la app > Mis tarjetas > Bloquear
   - O llama al 01 8000 XXX XXX

2. **Necesito estos datos del cobro:**
   - Fecha de la transacciÃ³n
   - Monto exacto
   - Nombre del comercio

**Proceso de reclamo:**
â€¢ Tienes 120 dÃ­as para reportar
â€¢ InvestigaciÃ³n: 5-15 dÃ­as hÃ¡biles
â€¢ Si procede, reembolso en 48 horas

**Medidas de seguridad:**
â€¢ Cambiaremos tu tarjeta sin costo
â€¢ Revisaremos todas tus transacciones
â€¢ Activaremos alertas adicionales

ğŸ”„ **Siguiente paso:** Por favor compÃ¡rteme los detalles del cobro para iniciar el reclamo formal inmediatamente.`,
    metrics: {
      clarity: 0.81,
      empathy: 0.9,
      completeness: 0.84,
      accuracy: 0.83,
    },
  },
  {
    id: 10,
    query: "cuanto me prestan",
    expectedIntent: "consulta_capacidad",
    expectedComponents: ["analysis", "response", "details", "next_step"],
    expectedKeywords: [
      "capacidad",
      "ingresos",
      "historial",
      "simulador",
      "monto",
    ],
    requiresClarification: true,
    response: `ğŸ¤” **AnÃ¡lisis:** Quieres conocer tu capacidad de prÃ©stamo. Esto depende de varios factores.

ğŸ’¡ **Respuesta:** Entiendo que quieres saber cuÃ¡nto puedes solicitar. Tu capacidad de prÃ©stamo depende de tu perfil financiero.

ğŸ“‹ **Detalles:**
**Factores que determinan el monto:**
â€¢ Ingresos mensuales demostrados
â€¢ Gastos y obligaciones actuales
â€¢ Historial crediticio
â€¢ Tipo de contrato laboral
â€¢ AntigÃ¼edad laboral

**Rangos generales:**
â€¢ Ingresos $1-2M: hasta $5M
â€¢ Ingresos $2-4M: hasta $15M
â€¢ Ingresos +$4M: hasta $50M

**Para cÃ¡lculo exacto necesito:**
- Tus ingresos mensuales
- Si tienes otros crÃ©ditos
- Para quÃ© necesitas el prÃ©stamo

**Simulador en lÃ­nea:**
App > PrÃ©stamos > Simular

ğŸ”„ **Siguiente paso:** Â¿Te gustarÃ­a que hagamos una simulaciÃ³n rÃ¡pida con tus datos o prefieres usar el simulador de la app?`,
    metrics: {
      clarity: 0.77,
      empathy: 0.68,
      completeness: 0.76,
      accuracy: 0.78,
    },
  },
];

export default function NotebookViewer() {
  const [activeTab, setActiveTab] = useState("ejercicio1");
  const [showDataset, setShowDataset] = useState(false);
  const [selectedCase, setSelectedCase] = useState<number | null>(null);
  const [evaluationCases, setEvaluationCases] = useState<{
    [key: number]: EvaluationCase;
  }>({});
  const [isLoading, setIsLoading] = useState<{ [key: number]: boolean }>({});

  // Importar la funciÃ³n de evaluaciÃ³n
  const evaluateResponse = (
    response: string,
    expectedData: ExpectedData
  ): Metrics => {
    const results: Metrics = {
      structure_score: 0,
      keyword_score: 0,
      clarification_score: 0,
      length_score: 0,
      empathy_score: 0,
      overall_score: 0,
    };

    // 1. Verificar componentes estructurales
    let structureScore = 0;
    for (const component of expectedData.expectedComponents) {
      if (
        component === "analysis" &&
        response.includes("ğŸ¤”") &&
        response.includes("AnÃ¡lisis:")
      ) {
        structureScore += 1;
      } else if (
        component === "response" &&
        response.includes("ğŸ’¡") &&
        response.includes("Respuesta:")
      ) {
        structureScore += 1;
      } else if (
        component === "details" &&
        response.includes("ğŸ“‹") &&
        response.includes("Detalles:")
      ) {
        structureScore += 1;
      } else if (
        component === "next_step" &&
        response.includes("ğŸ”„") &&
        response.includes("Siguiente paso:")
      ) {
        structureScore += 1;
      }
    }
    results.structure_score =
      structureScore / expectedData.expectedComponents.length;

    // 2. Verificar presencia de palabras clave
    let keywordsFound = 0;
    const responseLower = response.toLowerCase();
    for (const keyword of expectedData.expectedKeywords) {
      if (responseLower.includes(keyword.toLowerCase())) {
        keywordsFound += 1;
      }
    }
    results.keyword_score =
      keywordsFound / expectedData.expectedKeywords.length;

    // 3. Verificar manejo de aclaraciÃ³n
    const needsClarification = expectedData.requiresClarification;
    const asksForClarification = [
      "necesito",
      "podrÃ­as",
      "especÃ­fico",
      "aclaraciÃ³n",
      "cuÃ¡l",
      "quÃ©",
    ].some((phrase) => responseLower.includes(phrase));

    results.clarification_score =
      needsClarification === asksForClarification ? 1.0 : 0.0;

    // 4. Verificar longitud apropiada
    const length = response.length;
    if (length >= 200 && length <= 800) {
      results.length_score = 1.0;
    } else if (
      (length >= 100 && length < 200) ||
      (length > 800 && length <= 1000)
    ) {
      results.length_score = 0.7;
    } else {
      results.length_score = 0.3;
    }

    // 5. Verificar tono empÃ¡tico
    const empathyIndicators = [
      "entiendo",
      "perfecto",
      "ayudo",
      "lamento",
      "bienvenido",
    ];
    const empathyScore = empathyIndicators.filter((indicator) =>
      responseLower.includes(indicator)
    ).length;
    results.empathy_score = Math.min(empathyScore / 2, 1.0);

    // 6. Score general
    results.overall_score =
      results.structure_score * 0.3 +
      results.keyword_score * 0.25 +
      results.clarification_score * 0.2 +
      results.length_score * 0.1 +
      results.empathy_score * 0.15;

    return results;
  };

  const handleTestCase = async (caseId: number) => {
    setIsLoading((prev) => ({ ...prev, [caseId]: true }));

    try {
      const caseData = evaluationDataset.find((c) => c.id === caseId);
      if (!caseData) return;

      // Sistema simulado
      const simulatedResponse = caseData.response;
      const simulatedMetrics = evaluateResponse(simulatedResponse, caseData);

      // Sistema real - llamada a ChatGPT
      const response = await fetch("/api/test-prompt", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          query: caseData.query,
        }),
      });

      const data = await response.json();

      if (data.error) {
        alert(`Error: ${data.error}`);
        return;
      }

      const liveMetrics = evaluateResponse(data.response, caseData);

      setEvaluationCases((prev) => ({
        ...prev,
        [caseId]: {
          query: caseData.query,
          response: simulatedResponse,
          liveResponse: data.response,
          simulatedMetrics: simulatedMetrics,
          liveMetrics: liveMetrics,
        },
      }));
    } catch (error) {
      console.error("Error:", error);
      alert("Error al conectar con el servicio");
    } finally {
      setIsLoading((prev) => ({ ...prev, [caseId]: false }));
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-lg p-8 mb-6">
          <h1 className="text-4xl font-bold text-center mb-4">
            Challenge itti 2025
          </h1>
          <p className="text-center text-gray-600">
            Prompt Engineering y Arquitectura Cognitiva
          </p>
        </div>

        {/* Tabs */}
        <div className="flex space-x-4 mb-6">
          <button
            onClick={() => setActiveTab("ejercicio1")}
            className={`px-6 py-3 rounded-lg font-semibold transition-all ${
              activeTab === "ejercicio1"
                ? "bg-blue-600 text-white"
                : "bg-white text-gray-700 hover:bg-gray-100"
            }`}
          >
            Entrega Principal
          </button>
          <button
            onClick={() => setActiveTab("ejercicio2")}
            className={`px-6 py-3 rounded-lg font-semibold transition-all ${
              activeTab === "ejercicio2"
                ? "bg-purple-600 text-white"
                : "bg-white text-gray-700 hover:bg-gray-100"
            }`}
          >
            Arquitectura Cognitiva
          </button>
        </div>

        {/* Content */}
        {activeTab === "ejercicio1" && (
          <div className="space-y-6">
            {/* Objetivo */}
            <div className="bg-white rounded-lg shadow-lg p-8">
              <h2 className="text-2xl font-bold text-black mb-4">
                1 - Prompt Engineering para Bot de Fintech
              </h2>

              <div className="mb-6">
                <h3 className="text-xl font-bold text-black mb-3">Objetivo</h3>
                <p className="text-gray-700 leading-relaxed mb-4">
                  DiseÃ±ar un prompt unificado aplicando tÃ©cnicas de in-context
                  learning para un bot de atenciÃ³n al cliente de fintech.
                  Productos: tarjetas de dÃ©bito, tarjetas de crÃ©dito y
                  prÃ©stamos.
                </p>
              </div>

              <div className="border-t pt-6">
                <h3 className="text-xl font-bold text-black mb-4">
                  Entregables
                </h3>
                <ul className="space-y-4">
                  <li>
                    <strong className="text-black">Prompt Unificado:</strong>
                    <p className="text-gray-600 mt-1">
                      Prompt completo con tÃ©cnicas de prompting avanzadas.
                      Modelo: GPT-4.
                    </p>
                  </li>
                  <li>
                    <strong className="text-black">DocumentaciÃ³n:</strong>
                    <p className="text-gray-600 mt-1">
                      TÃ©cnicas utilizadas y justificaciÃ³n de su uso.
                    </p>
                  </li>
                  <li>
                    <strong className="text-black">Evaluaciones:</strong>
                    <p className="text-gray-600 mt-1">
                      Dataset de 5-10 ejemplos con mÃ©tricas de desempeÃ±o. CÃ³digo
                      replicable incluido.
                    </p>
                  </li>
                  <li>
                    <strong className="text-black">Ejemplos de Salidas:</strong>
                    <p className="text-gray-600 mt-1">
                      Demostraciones del funcionamiento en diferentes
                      escenarios.
                    </p>
                  </li>
                </ul>
              </div>
            </div>

            {/* Prompt Propuesto */}
            <div className="bg-white rounded-lg shadow-lg p-8">
              <h3 className="text-xl font-bold text-black mb-4">
                Prompt Propuesto
              </h3>
              <div className="bg-gray-900 text-white p-6 rounded-lg overflow-x-auto">
                <pre className="whitespace-pre-wrap font-mono text-sm">{`Eres un asesor financiero experto de una fintech llamada "FinTechPro". Tu objetivo es ayudar a los clientes con consultas sobre productos financieros especÃ­ficos.

PRODUCTOS DISPONIBLES:
1. Tarjeta de dÃ©bito (sin costo anual)
2. Tarjeta de crÃ©dito (cuota anual $2,500, lÃ­mites $5,000-$200,000)
3. PrÃ©stamos personales (desde $10,000 hasta $500,000, tasas desde 18% anual)

ESTRUCTURA DE RESPUESTA OBLIGATORIA:
ğŸ¤” **AnÃ¡lisis:** [Analiza la consulta del cliente]
ğŸ’¡ **Respuesta:** [Responde directamente a la consulta]
ğŸ“‹ **Detalles:** [Proporciona detalles especÃ­ficos del producto]
ğŸ”„ **Siguiente paso:** [Indica quÃ© hacer a continuaciÃ³n]

TÃ‰CNICAS DE IN-CONTEXT LEARNING:
1. **Few-shot learning:** Usa los ejemplos proporcionados como referencia
2. **Chain-of-thought:** Muestra tu razonamiento paso a paso
3. **Empathy:** Reconoce las emociones del cliente y responde apropiadamente
4. **Clarification:** Si la consulta es ambigua, pide informaciÃ³n especÃ­fica

EJEMPLOS DE RESPUESTAS:

Ejemplo 1 - Consulta: "Â¿CuÃ¡l es el lÃ­mite de mi tarjeta de crÃ©dito?"
ğŸ¤” **AnÃ¡lisis:** El cliente pregunta sobre el lÃ­mite de crÃ©dito. No tengo informaciÃ³n especÃ­fica de su cuenta, debo explicar los rangos generales.
ğŸ’¡ **Respuesta:** Entiendo tu consulta sobre el lÃ­mite de crÃ©dito. Los lÃ­mites de nuestra tarjeta van desde $5,000 hasta $200,000, dependiendo de tu perfil crediticio.
ğŸ“‹ **Detalles:** La evaluaciÃ³n incluye historial crediticio, ingresos y antigÃ¼edad laboral. Nuestra tarjeta tiene una cuota anual de $2,500 con diversos beneficios.
ğŸ”„ **Siguiente paso:** Te recomiendo que revisemos tu perfil especÃ­fico para conocer tu lÃ­mite exacto. Â¿Te gustarÃ­a que iniciemos ese proceso?

Ejemplo 2 - Consulta: "Necesito un prÃ©stamo"
ğŸ¤” **AnÃ¡lisis:** El cliente solicita un prÃ©stamo pero no especifica el monto ni el propÃ³sito. Necesito mÃ¡s informaciÃ³n para brindar una respuesta precisa.
ğŸ’¡ **Respuesta:** Me da gusto saber que estÃ¡s interesado en nuestros prÃ©stamos personales. Ofrecemos prÃ©stamos desde $10,000 hasta $500,000.
ğŸ“‹ **Detalles:** Nuestras tasas comienzan desde 18% anual, con plazos de hasta 60 meses. El proceso de aprobaciÃ³n toma entre 24-48 horas una vez completada la documentaciÃ³n.
ğŸ”„ **Siguiente paso:** Para brindarte informaciÃ³n mÃ¡s especÃ­fica, necesito conocer el monto que requieres y el propÃ³sito del prÃ©stamo. Â¿PodrÃ­as proporcionarme esos detalles?

REGLAS IMPORTANTES:
- Usa emojis para hacer las respuestas mÃ¡s amigables y visualmente atractivas
- Usa un tono profesional pero cÃ¡lido
- SÃ© empÃ¡tico con frases como "entiendo tu situaciÃ³n", "lamento escuchar eso", "me da gusto ayudarte"
- Si no tienes informaciÃ³n especÃ­fica, sÃ© honesto al respecto
- Prioriza la seguridad del cliente en casos de emergencia

MantÃ©n siempre un tono profesional, empÃ¡tico y orientado a la soluciÃ³n.`}</pre>
              </div>
            </div>

            {/* TÃ©cnicas Utilizadas */}
            <div className="bg-white rounded-lg shadow-lg p-8">
              <h3 className="text-xl font-bold text-black mb-4">
                TÃ©cnicas de Prompt Engineering
              </h3>

              <div className="grid md:grid-cols-2 gap-6">
                <div className="border-l-4 border-blue-500 pl-4">
                  <h4 className="font-bold text-black mb-2">
                    Chain of Thought (CoT)
                  </h4>
                  <p className="text-gray-600 text-sm">
                    El modelo muestra su proceso de razonamiento paso a paso
                    antes de dar la respuesta final.
                  </p>
                </div>

                <div className="border-l-4 border-green-500 pl-4">
                  <h4 className="font-bold text-black mb-2">
                    Few-Shot Learning
                  </h4>
                  <p className="text-gray-600 text-sm">
                    Se proporcionan ejemplos especÃ­ficos de consultas y
                    respuestas para guiar el comportamiento.
                  </p>
                </div>

                <div className="border-l-4 border-purple-500 pl-4">
                  <h4 className="font-bold text-black mb-2">Role Prompting</h4>
                  <p className="text-gray-600 text-sm">
                    Define el rol como &quot;asesor financiero experto&quot;
                    para mantener consistencia profesional.
                  </p>
                </div>

                <div className="border-l-4 border-orange-500 pl-4">
                  <h4 className="font-bold text-black mb-2">
                    Structured Output
                  </h4>
                  <p className="text-gray-600 text-sm">
                    Formato de respuesta obligatorio con 5 secciones para
                    mantener claridad y consistencia.
                  </p>
                </div>
              </div>
            </div>

            {/* Dataset de EvaluaciÃ³n */}
            <div className="bg-white rounded-lg shadow-lg p-8">
              <h3 className="text-xl font-bold text-black mb-4">
                Dataset de EvaluaciÃ³n y MÃ©tricas
              </h3>
              <p className="text-gray-600 mb-6">
                10 casos de prueba que cubren los principales escenarios de
                consultas en una fintech. Cada caso incluye mÃ©tricas de
                evaluaciÃ³n calculadas automÃ¡ticamente.
              </p>

              {/* API Key Status */}
              <div className="mb-6 p-4 bg-green-50 rounded-lg border border-green-200">
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-green-500 rounded-full mr-3"></div>
                  <span className="text-sm font-medium text-green-800">
                    API Key de OpenAI configurada correctamente
                  </span>
                </div>
              </div>

              <div className="mb-6">
                <button
                  onClick={() => setShowDataset(!showDataset)}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  {showDataset ? "Ocultar Dataset" : "Ver Dataset Completo"}
                </button>
              </div>

              {showDataset && (
                <div className="mt-6 space-y-4">
                  {evaluationDataset.map((item) => (
                    <div key={item.id} className="border rounded-lg">
                      <button
                        onClick={() =>
                          setSelectedCase(
                            selectedCase === item.id ? null : item.id
                          )
                        }
                        className="w-full p-4 text-left hover:bg-gray-50 transition-colors"
                      >
                        <div className="flex items-center justify-between">
                          <div>
                            <span className="font-bold text-black">
                              Caso {item.id}:
                            </span>
                            <span className="ml-2 text-gray-700">
                              {item.query}
                            </span>
                          </div>
                          <span className="text-lg">
                            {selectedCase === item.id ? "âˆ’" : "+"}
                          </span>
                        </div>
                      </button>

                      {selectedCase === item.id && (
                        <div className="p-4 border-t bg-gray-50">
                          <div className="space-y-4">
                            <div>
                              <h4 className="font-bold text-black mb-2">
                                Query del usuario:
                              </h4>
                              <p className="text-gray-700 italic mb-6">
                                {item.query}
                              </p>
                              <hr className="my-4" />
                            </div>

                            {/* ComparaciÃ³n lado a lado */}
                            <div className="grid md:grid-cols-2 gap-6">
                              {/* Sistema Simulado */}
                              <div className="space-y-4">
                                <h4 className="font-semibold text-gray-700 text-center">
                                  Sistema Simulado
                                </h4>
                                <div className="bg-white p-4 rounded border min-h-[300px]">
                                  <pre className="whitespace-pre-wrap text-sm">
                                    {item.response}
                                  </pre>
                                </div>
                                <div>
                                  <h5 className="font-bold text-black mb-2">
                                    MÃ©tricas de evaluaciÃ³n:
                                  </h5>
                                  <div className="space-y-2">
                                    <div className="flex justify-between p-2 bg-blue-50 rounded">
                                      <span className="text-sm">
                                        Estructura:
                                      </span>
                                      <span className="font-semibold">
                                        {Math.round(item.metrics.clarity * 100)}
                                        %
                                      </span>
                                    </div>
                                    <div className="flex justify-between p-2 bg-green-50 rounded">
                                      <span className="text-sm">
                                        Palabras clave:
                                      </span>
                                      <span className="font-semibold">
                                        {Math.round(
                                          item.metrics.accuracy * 100
                                        )}
                                        %
                                      </span>
                                    </div>
                                    <div className="flex justify-between p-2 bg-yellow-50 rounded">
                                      <span className="text-sm">
                                        ClarificaciÃ³n:
                                      </span>
                                      <span className="font-semibold">
                                        {Math.round(
                                          item.metrics.completeness * 100
                                        )}
                                        %
                                      </span>
                                    </div>
                                    <div className="flex justify-between p-2 bg-purple-50 rounded">
                                      <span className="text-sm">Longitud:</span>
                                      <span className="font-semibold">85%</span>
                                    </div>
                                    <div className="flex justify-between p-2 bg-pink-50 rounded">
                                      <span className="text-sm">EmpatÃ­a:</span>
                                      <span className="font-semibold">
                                        {Math.round(item.metrics.empathy * 100)}
                                        %
                                      </span>
                                    </div>
                                    <div className="flex justify-between p-2 bg-gray-100 rounded font-semibold">
                                      <span>Score General:</span>
                                      <span>
                                        {Math.round(
                                          ((item.metrics.clarity +
                                            item.metrics.accuracy +
                                            item.metrics.completeness +
                                            item.metrics.empathy) /
                                            4) *
                                            100
                                        )}
                                        %
                                      </span>
                                    </div>
                                  </div>
                                </div>
                              </div>

                              {/* Sistema Real con ChatGPT */}
                              <div className="space-y-4">
                                <h4 className="font-semibold text-blue-600 text-center">
                                  Sistema Real (ChatGPT)
                                </h4>

                                {!evaluationCases[item.id]?.liveResponse ? (
                                  <div className="bg-gray-50 p-8 rounded border min-h-[300px] flex flex-col items-center justify-center">
                                    <p className="text-gray-500 mb-4 text-center">
                                      Haz clic en el botÃ³n para probar con
                                      ChatGPT real
                                    </p>
                                    <button
                                      onClick={() => handleTestCase(item.id)}
                                      disabled={isLoading[item.id]}
                                      className={`px-4 py-2 rounded-lg ${
                                        isLoading[item.id]
                                          ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                                          : "bg-blue-600 text-white hover:bg-blue-700"
                                      }`}
                                    >
                                      {isLoading[item.id]
                                        ? "Probando..."
                                        : "Probar Real"}
                                    </button>
                                  </div>
                                ) : (
                                  <>
                                    <div className="bg-white p-4 rounded border min-h-[300px]">
                                      <pre className="whitespace-pre-wrap text-sm">
                                        {evaluationCases[item.id].liveResponse}
                                      </pre>
                                    </div>
                                    <div>
                                      <h5 className="font-bold text-black mb-2">
                                        MÃ©tricas de evaluaciÃ³n:
                                      </h5>
                                      <div className="space-y-2">
                                        <div className="flex justify-between p-2 bg-blue-50 rounded">
                                          <span className="text-sm">
                                            Estructura:
                                          </span>
                                          <span className="font-semibold">
                                            {evaluationCases[item.id]
                                              .liveMetrics
                                              ? Math.round(
                                                  evaluationCases[item.id]
                                                    .liveMetrics!
                                                    .structure_score * 100
                                                )
                                              : 0}
                                            %
                                          </span>
                                        </div>
                                        <div className="flex justify-between p-2 bg-green-50 rounded">
                                          <span className="text-sm">
                                            Palabras clave:
                                          </span>
                                          <span className="font-semibold">
                                            {evaluationCases[item.id]
                                              .liveMetrics
                                              ? Math.round(
                                                  evaluationCases[item.id]
                                                    .liveMetrics!
                                                    .keyword_score * 100
                                                )
                                              : 0}
                                            %
                                          </span>
                                        </div>
                                        <div className="flex justify-between p-2 bg-yellow-50 rounded">
                                          <span className="text-sm">
                                            ClarificaciÃ³n:
                                          </span>
                                          <span className="font-semibold">
                                            {evaluationCases[item.id]
                                              .liveMetrics
                                              ? Math.round(
                                                  evaluationCases[item.id]
                                                    .liveMetrics!
                                                    .clarification_score * 100
                                                )
                                              : 0}
                                            %
                                          </span>
                                        </div>
                                        <div className="flex justify-between p-2 bg-purple-50 rounded">
                                          <span className="text-sm">
                                            Longitud:
                                          </span>
                                          <span className="font-semibold">
                                            {evaluationCases[item.id]
                                              .liveMetrics
                                              ? Math.round(
                                                  evaluationCases[item.id]
                                                    .liveMetrics!.length_score *
                                                    100
                                                )
                                              : 0}
                                            %
                                          </span>
                                        </div>
                                        <div className="flex justify-between p-2 bg-pink-50 rounded">
                                          <span className="text-sm">
                                            EmpatÃ­a:
                                          </span>
                                          <span className="font-semibold">
                                            {evaluationCases[item.id]
                                              .liveMetrics
                                              ? Math.round(
                                                  evaluationCases[item.id]
                                                    .liveMetrics!
                                                    .empathy_score * 100
                                                )
                                              : 0}
                                            %
                                          </span>
                                        </div>
                                        <div className="flex justify-between p-2 bg-gray-100 rounded font-semibold">
                                          <span>Score General:</span>
                                          <span>
                                            {evaluationCases[item.id]
                                              .liveMetrics
                                              ? Math.round(
                                                  evaluationCases[item.id]
                                                    .liveMetrics!
                                                    .overall_score * 100
                                                )
                                              : 0}
                                            %
                                          </span>
                                        </div>
                                      </div>
                                    </div>
                                  </>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* CÃ³digo de EvaluaciÃ³n */}
            <div className="bg-white rounded-lg shadow-lg p-8">
              <h3 className="text-xl font-bold text-black mb-4">
                CÃ³digo de EvaluaciÃ³n de MÃ©tricas (TypeScript)
              </h3>
              <div className="bg-gray-900 border border-gray-600 p-6 rounded-lg overflow-x-auto">
                <pre className="font-mono text-sm text-white bg-gray-900 p-4 rounded">{`interface Metrics {
  structure_score: number;
  keyword_score: number;
  clarification_score: number;
  length_score: number;
  empathy_score: number;
  overall_score: number;
}

interface ExpectedData {
  expectedComponents: string[];
  expectedKeywords: string[];
  requiresClarification: boolean;
}

const evaluateResponse = (response: string, expectedData: ExpectedData): Metrics => {
  const results: Metrics = {
    structure_score: 0,
    keyword_score: 0,
    clarification_score: 0,
    length_score: 0,
    empathy_score: 0,
    overall_score: 0,
  };

  // 1. Verificar componentes estructurales
  let structureScore = 0;
  for (const component of expectedData.expectedComponents) {
    if (component === "analysis" && 
        response.includes("ğŸ¤”") && response.includes("AnÃ¡lisis:")) {
      structureScore += 1;
    } else if (component === "response" && 
               response.includes("ğŸ’¡") && response.includes("Respuesta:")) {
      structureScore += 1;
    } else if (component === "details" && 
               response.includes("ğŸ“‹") && response.includes("Detalles:")) {
      structureScore += 1;
    } else if (component === "next_step" && 
               response.includes("ğŸ”„") && response.includes("Siguiente paso:")) {
      structureScore += 1;
    }
  }
  results.structure_score = structureScore / expectedData.expectedComponents.length;

  // 2. Verificar presencia de palabras clave
  let keywordsFound = 0;
  const responseLower = response.toLowerCase();
  for (const keyword of expectedData.expectedKeywords) {
    if (responseLower.includes(keyword.toLowerCase())) {
      keywordsFound += 1;
    }
  }
  results.keyword_score = keywordsFound / expectedData.expectedKeywords.length;

  // 3. Verificar manejo de aclaraciÃ³n
  const needsClarification = expectedData.requiresClarification;
  const asksForClarification = ["necesito", "podrÃ­as", "especÃ­fico", "aclaraciÃ³n", "cuÃ¡l", "quÃ©"]
    .some(phrase => responseLower.includes(phrase));
  
  results.clarification_score = needsClarification === asksForClarification ? 1.0 : 0.0;

  // 4. Verificar longitud apropiada
  const length = response.length;
  if (length >= 200 && length <= 800) {
    results.length_score = 1.0;
  } else if ((length >= 100 && length < 200) || (length > 800 && length <= 1000)) {
    results.length_score = 0.7;
  } else {
    results.length_score = 0.3;
  }

  // 5. Verificar tono empÃ¡tico
  const empathyIndicators = ["entiendo", "perfecto", "ayudo", "lamento", "bienvenido"];
  const empathyScore = empathyIndicators.filter(indicator => 
    responseLower.includes(indicator)
  ).length;
  results.empathy_score = Math.min(empathyScore / 2, 1.0);

  // 6. Score general
  results.overall_score = (
    results.structure_score * 0.3 +
    results.keyword_score * 0.25 +
    results.clarification_score * 0.2 +
    results.length_score * 0.1 +
    results.empathy_score * 0.15
  );

  return results;
};`}</pre>
              </div>

              <div className="mt-4 p-4 bg-blue-50 rounded-lg">
                <p className="text-sm text-blue-800">
                  <strong>Nota:</strong> Este cÃ³digo TypeScript se ejecuta en
                  tiempo real para evaluar tanto las respuestas simuladas como
                  las respuestas reales de ChatGPT, proporcionando mÃ©tricas
                  objetivas y comparables.
                </p>
              </div>

              {/* Fundamento de la EvaluaciÃ³n */}
              <div className="mt-8 bg-gray-50 rounded-lg p-8 border border-gray-200">
                <h3 className="text-xl font-bold text-black mb-6 text-center">
                  Fundamento de la EvaluaciÃ³n
                </h3>
                <p className="text-center text-gray-600 mb-6 max-w-3xl mx-auto">
                  Sistema de evaluaciÃ³n basado en mÃ©tricas objetivas que
                  reflejan calidad real del prompt. Utiliza detecciÃ³n
                  inteligente de intenciones y anÃ¡lisis estructural para
                  proporcionar feedback especÃ­fico y accionable.
                </p>
                <div className="grid md:grid-cols-2 gap-6">
                  <div className="bg-white p-5 rounded-lg shadow-sm border">
                    <h4 className="font-bold text-black mb-2">
                      1. Estructura (~86%)
                    </h4>
                    <p className="text-sm text-gray-700">
                      Verifica componentes estructurales: AnÃ¡lisis, Respuesta,
                      Detalles y Siguiente paso. Busca emojis especÃ­ficos y
                      formato consistente.
                    </p>
                  </div>
                  <div className="bg-white p-5 rounded-lg shadow-sm border">
                    <h4 className="font-bold text-black mb-2">
                      2. EmpatÃ­a (~74%)
                    </h4>
                    <p className="text-sm text-gray-700">
                      Identifica 5 palabras empÃ¡ticas especÃ­ficas:
                      &quot;entiendo&quot;, &quot;perfecto&quot;,
                      &quot;ayudo&quot;, &quot;lamento&quot;,
                      &quot;bienvenido&quot;. MÃ¡ximo 100% con 2+ palabras.
                    </p>
                  </div>
                  <div className="bg-white p-5 rounded-lg shadow-sm border">
                    <h4 className="font-bold text-black mb-2">
                      3. Palabras clave (~79%)
                    </h4>
                    <p className="text-sm text-gray-700">
                      Verifica presencia de tÃ©rminos relevantes segÃºn el
                      contexto de la consulta. EvalÃºa productos, procesos y
                      informaciÃ³n especÃ­fica.
                    </p>
                  </div>
                  <div className="bg-white p-5 rounded-lg shadow-sm border">
                    <h4 className="font-bold text-black mb-2">
                      4. Score general (~79%)
                    </h4>
                    <p className="text-sm text-gray-700">
                      Combina todas las mÃ©tricas con pesos: Estructura (30%),
                      Palabras clave (25%), AclaraciÃ³n (20%), Longitud (10%),
                      EmpatÃ­a (15%).
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === "ejercicio2" && (
          <div className="space-y-8">
            <div className="text-center">
              <h2 className="text-3xl font-extrabold text-black tracking-tight">
                Arquitectura Cognitiva
              </h2>
              <p className="mt-4 text-lg text-gray-600">
                Propuesta para chatbot &quot;VuelaConNosotros&quot; de
                aerolÃ­nea.
              </p>
            </div>

            <div className="bg-white rounded-lg shadow-lg p-8">
              <h3 className="text-xl font-bold text-black mb-4">
                1. Arquitectura de Alto Nivel
              </h3>
              <p className="text-gray-600 mb-6">
                Diagrama de componentes principales y sus interacciones para
                procesamiento eficiente de consultas.
              </p>
              <ArchitectureDiagram />
            </div>

            <div className="bg-white rounded-lg shadow-lg p-8">
              <h3 className="text-xl font-bold text-black mb-4">
                2. Flujo Conversacional
              </h3>
              <p className="text-gray-600 mb-6">
                AnÃ¡lisis detallado de dos intenciones crÃ­ticas con flujos de
                Ã©xito y manejo de errores.
              </p>
              <div className="prose max-w-none text-black">
                <h4>Intenciones CrÃ­ticas Identificadas:</h4>
                <ol>
                  <li>
                    <strong>Cambiar Vuelo:</strong> Permite a los usuarios
                    modificar su reserva existente.
                  </li>
                  <li>
                    <strong>Consultar PolÃ­ticas de Equipaje:</strong>{" "}
                    Proporciona informaciÃ³n sobre las reglas de equipaje.
                  </li>
                </ol>

                <h5 className="font-bold">
                  Flujo Conversacional para &quot;Cambiar Vuelo&quot;
                </h5>

                <p>
                  <strong>Camino Exitoso:</strong>
                </p>
                <div className="bg-gray-50 p-4 rounded-lg border my-4">
                  <div className="space-y-3">
                    <div className="flex justify-end">
                      <div className="bg-blue-500 text-white p-3 rounded-lg rounded-br-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Usuario</div>
                        <div>&quot;Quiero cambiar mi vuelo a BogotÃ¡.&quot;</div>
                      </div>
                    </div>
                    <div className="flex justify-start">
                      <div className="bg-gray-200 text-gray-800 p-3 rounded-lg rounded-bl-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Bot</div>
                        <div>
                          &quot;Claro, puedo ayudarte. Â¿Me confirmas tu nÃºmero
                          de reserva o documento de identidad?&quot;
                        </div>
                      </div>
                    </div>
                    <div className="flex justify-end">
                      <div className="bg-blue-500 text-white p-3 rounded-lg rounded-br-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Usuario</div>
                        <div>&quot;Mi reserva es ABC123.&quot;</div>
                      </div>
                    </div>
                    <div className="flex justify-start">
                      <div className="bg-gray-200 text-gray-800 p-3 rounded-lg rounded-bl-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Bot</div>
                        <div>
                          &quot;Perfecto. Veo tu vuelo para el 15 de julio.
                          Â¿Para quÃ© fecha te gustarÃ­a cambiarlo?&quot;
                        </div>
                      </div>
                    </div>
                    <div className="flex justify-end">
                      <div className="bg-blue-500 text-white p-3 rounded-lg rounded-br-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Usuario</div>
                        <div>&quot;Para el 20 de julio.&quot;</div>
                      </div>
                    </div>
                    <div className="flex justify-start">
                      <div className="bg-gray-200 text-gray-800 p-3 rounded-lg rounded-bl-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Bot</div>
                        <div>
                          &quot;He encontrado un vuelo disponible el 20 de julio
                          a las 10:00 AM. La diferencia de tarifa es de $50.
                          Â¿Deseas confirmar el cambio?&quot;
                        </div>
                      </div>
                    </div>
                    <div className="flex justify-end">
                      <div className="bg-blue-500 text-white p-3 rounded-lg rounded-br-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Usuario</div>
                        <div>&quot;SÃ­, confirmo.&quot;</div>
                      </div>
                    </div>
                    <div className="flex justify-start">
                      <div className="bg-green-500 text-white p-3 rounded-lg rounded-bl-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Bot</div>
                        <div>
                          &quot;Excelente! Tu vuelo ha sido cambiado. RecibirÃ¡s
                          la confirmaciÃ³n en tu correo electrÃ³nico en unos
                          minutos.&quot;
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <p>
                  <strong>Camino con AclaraciÃ³n / Manejo de Error:</strong>
                </p>
                <div className="bg-gray-50 p-4 rounded-lg border my-4">
                  <div className="space-y-3">
                    <div className="flex justify-end">
                      <div className="bg-blue-500 text-white p-3 rounded-lg rounded-br-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Usuario</div>
                        <div>&quot;CÃ¡mbiame el vuelo.&quot;</div>
                      </div>
                    </div>
                    <div className="flex justify-start">
                      <div className="bg-yellow-500 text-white p-3 rounded-lg rounded-bl-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Bot</div>
                        <div>
                          &quot;Entendido. Para poder ayudarte necesito saber,
                          Â¿cuÃ¡l es tu nÃºmero de reserva y a quÃ© destino
                          viajas?&quot;
                        </div>
                      </div>
                    </div>
                    <div className="flex justify-end">
                      <div className="bg-blue-500 text-white p-3 rounded-lg rounded-br-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Usuario</div>
                        <div>&quot;No tengo la reserva a mano.&quot;</div>
                      </div>
                    </div>
                    <div className="flex justify-start">
                      <div className="bg-yellow-500 text-white p-3 rounded-lg rounded-bl-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Bot</div>
                        <div>
                          &quot;No te preocupes. Puedo buscar tu reserva con tu
                          nÃºmero de documento y apellido. Â¿Me los podrÃ­as
                          proporcionar?&quot;
                        </div>
                      </div>
                    </div>
                    <div className="flex justify-end">
                      <div className="bg-blue-500 text-white p-3 rounded-lg rounded-br-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Usuario</div>
                        <div>&quot;12345678, PÃ©rez.&quot;</div>
                      </div>
                    </div>
                    <div className="flex justify-start">
                      <div className="bg-green-500 text-white p-3 rounded-lg rounded-bl-sm max-w-xs">
                        <div className="text-xs opacity-75 mb-1">Bot</div>
                        <div>
                          &quot;Gracias. Encuentro dos reservas a nombre de Juan
                          PÃ©rez. Una a BogotÃ¡ el 15 de julio y otra a MedellÃ­n
                          el 22 de agosto. Â¿CuÃ¡l de las dos deseas
                          modificar?&quot;
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <h5 className="font-bold">
                  DesafÃ­o Conversacional y MitigaciÃ³n
                </h5>
                <p>
                  <strong>DesafÃ­o:</strong> La ambigÃ¼edad en la solicitud
                  inicial del usuario (&quot;cÃ¡mbiame el vuelo&quot;).
                  <br />
                  <strong>MitigaciÃ³n:</strong> La arquitectura estÃ¡ diseÃ±ada
                  para manejar la ambigÃ¼edad haciendo preguntas clarificadoras
                  secuenciales. En lugar de fallar, el bot solicita la
                  informaciÃ³n que le falta (primero reserva, luego documento)
                  hasta tener los datos necesarios para proceder, guiando al
                  usuario de forma proactiva.
                </p>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-lg p-8">
              <h3 className="text-xl font-bold text-black mb-4">
                3. Estrategia de EvoluciÃ³n y Escalabilidad
              </h3>
              <div className="prose max-w-none text-black">
                <p>
                  La arquitectura se diseÃ±a para ser escalable y evolutiva desde
                  su concepciÃ³n:
                </p>
                <ul>
                  <li>
                    <strong>Escalabilidad:</strong> La arquitectura basada en
                    microservicios permite que cada componente (NLU, Gestor de
                    DiÃ¡logo, etc.) se escale de forma independiente. Si aumenta
                    el nÃºmero de usuarios, podemos asignar mÃ¡s recursos solo al
                    NLU sin afectar los otros componentes.
                  </li>
                  <li>
                    <strong>Nuevas Funcionalidades:</strong> La capa de
                    integraciÃ³n y el gestor de diÃ¡logo modular permiten agregar
                    nuevas herramientas y APIs (ej. un nuevo sistema de
                    check-in) sin modificar el nÃºcleo del bot. Simplemente se
                    aÃ±ade una nueva habilidad al gestor.
                  </li>
                  <li>
                    <strong>EvoluciÃ³n Continua:</strong> Se implementarÃ¡ un
                    ciclo de feedback donde las conversaciones con baja
                    puntuaciÃ³n de satisfacciÃ³n o con fallos de comprensiÃ³n son
                    revisadas por un equipo humano. Estas conversaciones se
                    utilizan para re-entrenar y ajustar el modelo de NLU y el
                    prompt, mejorando continuamente la inteligencia del bot.
                  </li>
                </ul>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
